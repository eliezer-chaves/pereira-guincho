# Guia Completo: Angular + Laravel - Deploy Integrado

## Visão Geral da Arquitetura

Este sistema integra Angular (frontend) com Laravel (API) usando um controlador PHP que decide qual sistema executar baseado na URL:

- **Rotas normais** (`/`, `/contato`) → Angular
- **Rotas API** (`/api/ping`, `/api/users`) → Laravel  
- **Rotas inexistentes** → Página 404 personalizada

### Estrutura Final no Servidor
```
public_html/
├── index.php          ← Controlador principal (decide Angular vs Laravel)
├── index.html         ← Aplicação Angular (SPA)
├── .htaccess          ← Configurações do servidor
├── 404.html           ← Página de erro personalizada (opcional)
├── assets/            ← CSS, JS, imagens do Angular
└── outros arquivos do build Angular...
```

---

## CONFIGURAÇÃO INICIAL (Primeira Vez)

### 1. Organizar Arquivos de Produção

No seu projeto Angular, crie a estrutura para os arquivos de servidor:

```bash
# Dentro da pasta do projeto Angular
mkdir src/production
```

### 2. Criar Arquivos de Produção

#### `src/production/index.php`
```php
<?php
/**
 * Controlador Principal - Angular + Laravel
 * Este arquivo decide se executa Angular ou Laravel baseado na URL
 */

// Configuração do projeto
$laravel_folder_name = 'click-tracker'; // Nome da pasta do Laravel
$api_prefix = '/api/';                   // Prefixo das rotas de API

$request_uri = $_SERVER['REQUEST_URI'] ?? '';

// ROTAS DE API → LARAVEL
if (strpos($request_uri, $api_prefix) === 0) {
    header('Content-Type: application/json');
    header('Access-Control-Allow-Origin: *');
    header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
    header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With');
    
    // Configura variáveis para o Laravel
    $_SERVER['SCRIPT_NAME'] = '/index.php';
    $_SERVER['PATH_INFO'] = str_replace($api_prefix, '/', $request_uri);
    
    // Caminho para o Laravel (ajuste conforme sua estrutura)
    $laravel_path = $_SERVER['DOCUMENT_ROOT'] . '/../' . $laravel_folder_name . '/public/index.php';
    
    if (file_exists($laravel_path)) {
        // Captura a saída do Laravel
        ob_start();
        include $laravel_path;
        $output = ob_get_clean();
        
        if (!empty($output)) {
            echo $output;
        } else {
            // Laravel não retornou nada - provavelmente 404
            http_response_code(404);
            echo json_encode([
                'error' => 'Endpoint not found',
                'message' => 'The requested API endpoint does not exist',
                'status' => 404
            ]);
        }
    } else {
        // Laravel não encontrado
        http_response_code(500);
        echo json_encode([
            'error' => 'API service unavailable',
            'message' => 'The API service is temporarily unavailable',
            'status' => 500,
            'path' => $laravel_path
        ]);
    }
    exit;
}

// ROTAS ANGULAR VÁLIDAS
$valid_angular_routes = [
    '/',
    '/obrigado'
    // ADICIONE AQUI NOVAS ROTAS DO ANGULAR QUANDO CRIAR
    // Exemplo: '/contato', '/servicos', '/sobre'
];

// Remove query string para verificação
$clean_uri = strtok($request_uri, '?');

// ROTAS ANGULAR → SERVE O SPA
if (in_array($clean_uri, $valid_angular_routes)) {
    $angular_file = __DIR__ . '/index.html';
    
    if (file_exists($angular_file)) {
        http_response_code(200);
        header('Cache-Control: no-cache, no-store, must-revalidate');
        header('Content-Type: text/html; charset=utf-8');
        echo file_get_contents($angular_file);
    } else {
        http_response_code(500);
        echo '<h1>Erro: Aplicação Angular não encontrada</h1>';
    }
    exit;
}

// ROTAS NÃO ENCONTRADAS → PÁGINA 404
$page_404 = __DIR__ . '/404.html';

if (file_exists($page_404)) {
    http_response_code(404);
    echo file_get_contents($page_404);
} else {
    // Fallback 404 básico
    http_response_code(404);
    echo '<!DOCTYPE html>';
    echo '<html><head><title>404 - Página não encontrada</title></head><body>';
    echo '<h1>404 - Página não encontrada</h1>';
    echo '<p><a href="/">Voltar ao início</a></p>';
    echo '</body></html>';
}
?>
```

#### `src/production/.htaccess`
```apache
# ========================================
# ANGULAR + LARAVEL - CONFIGURAÇÃO FINAL
# ========================================
RewriteEngine On

# ========================================
# ARQUIVOS ESTÁTICOS
# ========================================
# Se o arquivo físico existe, serve diretamente (CSS, JS, imagens, etc.)
RewriteCond %{REQUEST_FILENAME} -f
RewriteRule ^ - [L]

# ========================================
# FRONT CONTROLLER PATTERN
# ========================================
# Todo o resto vai para index.php que decide: Angular ou Laravel
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^ index.php [L]

# ========================================
# PÁGINAS DE ERRO
# ========================================
ErrorDocument 404 /index.php
ErrorDocument 403 /index.php
ErrorDocument 500 /index.php

# ========================================
# COMPRESSÃO GZIP
# ========================================
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE application/json
    AddOutputFilterByType DEFLATE image/svg+xml
</IfModule>

# ========================================
# CACHE OTIMIZADO
# ========================================
<IfModule mod_expires.c>
    ExpiresActive On
    
    # Arquivos estáticos com cache longo
    ExpiresByType image/jpg "access plus 1 month"
    ExpiresByType image/jpeg "access plus 1 month"
    ExpiresByType image/gif "access plus 1 month"
    ExpiresByType image/png "access plus 1 month"
    ExpiresByType image/webp "access plus 1 month"
    ExpiresByType image/svg+xml "access plus 1 month"
    ExpiresByType image/x-icon "access plus 1 year"
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
    ExpiresByType font/woff "access plus 1 year"
    ExpiresByType font/woff2 "access plus 1 year"
    
    # SPA e API sem cache
    ExpiresByType text/html "access plus 0 seconds"
    ExpiresByType application/json "access plus 0 seconds"
</IfModule>

# ========================================
# HEADERS DE SEGURANÇA
# ========================================
<IfModule mod_headers.c>
    # CORS para APIs
    Header always set Access-Control-Allow-Origin "*"
    Header always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    Header always set Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
    
    # Segurança básica
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options SAMEORIGIN
    Header always set X-XSS-Protection "1; mode=block"
    
    # Remove headers desnecessários
    Header unset Server
    Header unset X-Powered-By
</IfModule>

# ========================================
# SEGURANÇA DE ARQUIVOS
# ========================================
ServerSignature Off

<Files ".htaccess">
    Require all denied
</Files>

<FilesMatch "\.(htaccess|htpasswd|ini|log|sh|inc|bak|sql)$">
    Require all denied
</FilesMatch>

# Remove ETags para melhor cache
FileETag None
```

#### `src/production/404.html` (Opcional)
```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 - Página não encontrada</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            max-width: 500px;
        }
        .error-code {
            font-size: 72px;
            font-weight: bold;
            color: #e74c3c;
            margin: 0;
        }
        .error-message {
            font-size: 24px;
            color: #2c3e50;
            margin: 20px 0;
        }
        .error-description {
            font-size: 16px;
            color: #7f8c8d;
            margin-bottom: 30px;
            line-height: 1.5;
        }
        .btn {
            display: inline-block;
            background: #3498db;
            color: white;
            padding: 12px 30px;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background 0.3s;
        }
        .btn:hover {
            background: #2980b9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="error-code">404</div>
        <div class="error-message">Página não encontrada</div>
        <div class="error-description">
            A página que você está procurando não existe ou foi removida.
        </div>
        <a href="/" class="btn">Voltar ao início</a>
    </div>
</body>
</html>
```

### 3. Configurar angular.json

Atualize seu `angular.json` para NÃO incluir os arquivos de produção no build:

```json
{
  "projects": {
    "pereira-guincho-angular": {
      "architect": {
        "build": {
          "options": {
            "outputPath": "dist/pereira-guincho-angular",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              "src/robots.txt",
              "src/sitemap.xml"
            ]
          }
        }
      }
    }
  }
}
```

### 4. Criar Script de Deploy

Crie `deploy.js` na raiz do projeto:

```javascript
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('🔨 Iniciando build do Angular...');

try {
    execSync('ng build --configuration production', { stdio: 'inherit' });
    console.log('✅ Build do Angular concluído!');
} catch (error) {
    console.error('❌ Erro no build do Angular:', error.message);
    process.exit(1);
}

// Caminhos
const distDir = './dist/pereira-guincho-angular';
const prodDir = './src/production';

console.log('\n📦 Copiando arquivos de produção...');

// Verifica se a pasta dist existe
if (!fs.existsSync(distDir)) {
    console.error('❌ Pasta dist não encontrada:', distDir);
    process.exit(1);
}

// Arquivos a copiar
const filesToCopy = [
    { name: 'index.php', required: true },
    { name: '.htaccess', required: true },
    { name: '404.html', required: false }
];

let copiedCount = 0;

filesToCopy.forEach(file => {
    const srcPath = path.join(prodDir, file.name);
    const destPath = path.join(distDir, file.name);
    
    if (fs.existsSync(srcPath)) {
        fs.copyFileSync(srcPath, destPath);
        console.log(`   ✅ ${file.name} copiado`);
        copiedCount++;
    } else if (file.required) {
        console.error(`   ❌ ${file.name} é obrigatório mas não foi encontrado em src/production/`);
        process.exit(1);
    } else {
        console.log(`   ⏭️ ${file.name} não encontrado (opcional)`);
    }
});

console.log('\n🎉 Deploy preparado com sucesso!');
console.log('📂 Pasta pronta:', path.resolve(distDir));
console.log('\n📤 Próximos passos:');
console.log('   1. Abra a pasta dist/pereira-guincho-angular/');
console.log('   2. Selecione TODOS os arquivos');
console.log('   3. Faça upload para public_html/ (raiz do servidor)');

console.log('\n📋 Estrutura final no servidor:');
console.log('   ✓ index.html (Angular SPA)');
console.log('   ✓ index.php (Controlador principal)');
console.log('   ✓ .htaccess (Configurações do servidor)');
if (fs.existsSync(path.join(distDir, '404.html'))) {
    console.log('   ✓ 404.html (Página de erro)');
}
console.log('   ✓ assets/ (CSS, JS, imagens)');
console.log('   ✓ Outros arquivos do Angular');
```

### 5. Configurar package.json

```json
{
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "build:deploy": "node deploy.js",
    "test": "ng test"
  }
}
```

### 6. Teste Inicial

```bash
npm run build:deploy
```

---

## CONFIGURAÇÃO DO LARAVEL (API)

No seu projeto Laravel, configure as rotas da API:

### `routes/api.php`
```php
<?php
use Illuminate\Support\Facades\Route;

// Rota de teste
Route::get('/ping', function () {
    return response()->json([
        'status' => 'ok',
        'message' => 'API online 🚀',
        'timestamp' => now()->toISOString()
    ]);
});

// Suas outras rotas API aqui...
Route::get('/users', [UserController::class, 'index']);
Route::post('/contact', [ContactController::class, 'store']);

// IMPORTANTE: Rota fallback para APIs não encontradas
Route::fallback(function () {
    return response()->json([
        'error' => 'Endpoint not found',
        'message' => 'The requested API endpoint does not exist',
        'status' => 404,
        'available_endpoints' => [
            'GET /api/ping - API status check',
            'GET /api/users - List users',
            'POST /api/contact - Submit contact form'
            // Liste aqui seus endpoints disponíveis
        ]
    ], 404);
});
```

---

## USO DIÁRIO

### Adicionando Novas Rotas Angular

1. **Criar componente:**
```bash
ng generate component pages/contato
```

2. **Adicionar rota no Angular:**
```typescript
// src/app/app.routes.ts
export const routes: Routes = [
  { path: '', component: PageHomeComponent, title: 'Home' },
  { path: 'obrigado', component: PageObrigadoComponent, title: 'Obrigado' },
  { path: 'contato', component: PageContatoComponent, title: 'Contato' }, // NOVO
];
```

3. **Atualizar rotas válidas no servidor:**
```php
// src/production/index.php
$valid_angular_routes = [
    '/',
    '/obrigado',
    '/contato'  // ADICIONAR AQUI
];
```

4. **Deploy:**
```bash
npm run build:deploy
# Upload da pasta dist/ para public_html/
```

### Adicionando Novas Rotas Laravel (API)

1. **Adicionar rota no Laravel:**
```php
// routes/api.php
Route::get('/products', [ProductController::class, 'index']);
Route::post('/products', [ProductController::class, 'store']);
```

2. **Atualizar lista de endpoints no fallback:**
```php
'available_endpoints' => [
    'GET /api/ping - API status check',
    'GET /api/products - List products',    // NOVO
    'POST /api/products - Create product'   // NOVO
]
```

3. **Deploy do Laravel:**
```bash
# No diretório do Laravel
composer install --no-dev
# Upload apenas dos arquivos alterados do Laravel
```

### Adicionando Novo Prefixo de API

Se quiser adicionar outras rotas como `/app/` ou `/admin/`:

1. **Modificar index.php:**
```php
// Múltiplos prefixos de API
$api_prefixes = ['/api/', '/app/', '/admin/'];
$is_api_route = false;

foreach ($api_prefixes as $prefix) {
    if (strpos($request_uri, $prefix) === 0) {
        $is_api_route = true;
        break;
    }
}

if ($is_api_route) {
    // Lógica da API...
}
```

---

## TESTES E VALIDAÇÃO

### URLs para Testar

Após o deploy, teste estas URLs:

```bash
# Angular Routes
https://seu-dominio.com/           → Angular (Home)
https://seu-dominio.com/obrigado   → Angular (Obrigado)
https://seu-dominio.com/contato    → Angular (Contato)

# API Routes  
https://seu-dominio.com/api/ping   → JSON da API
https://seu-dominio.com/api/users  → JSON da API

# 404 Tests
https://seu-dominio.com/inexistente    → 404.html
https://seu-dominio.com/api/inexistente → JSON 404
```

### Debug e Troubleshooting

**Se Angular não carrega:**
- Verifique se `index.html` está na raiz
- Confirme que a rota está em `$valid_angular_routes`

**Se API não funciona:**
- Teste o Laravel diretamente
- Verifique se a pasta Laravel está no caminho correto
- Confirme as permissões de arquivo

**Se 404 não aparece:**
- Verifique se `404.html` existe
- Teste com rota claramente inexistente

---

## RESUMO DO FLUXO

### Configuração (Uma vez):
1. Criar pasta `src/production/`
2. Criar arquivos: `index.php`, `.htaccess`, `404.html`
3. Criar `deploy.js` 
4. Configurar `package.json`

### Desenvolvimento:
1. Desenvolver Angular normalmente (`ng serve`)
2. Testar API Laravel normalmente
3. Adicionar rotas conforme necessário

### Deploy:
1. `npm run build:deploy`
2. Upload de `dist/` para `public_html/`
3. Testar todas as URLs

### Manutenção:
- **Nova rota Angular** → Adicionar em `app.routes.ts` + `index.php`
- **Nova rota API** → Adicionar em `routes/api.php`
- **Mudança no Angular** → Rebuild e upload
- **Mudança no Laravel** → Upload apenas do Laravel

Este sistema garante que Angular e Laravel funcionem perfeitamente integrados, com roteamento automático e páginas de erro personalizadas.